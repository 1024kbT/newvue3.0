{"remainingRequest":"D:\\project\\seat\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\seat\\src\\components\\HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\seat\\src\\components\\HelloWorld.vue","mtime":1623741187059},{"path":"D:\\project\\seat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623737512899},{"path":"D:\\project\\seat\\node_modules\\babel-loader\\lib\\index.js","mtime":1623737527373},{"path":"D:\\project\\seat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623737512899},{"path":"D:\\project\\seat\\node_modules\\vue-loader\\lib\\index.js","mtime":1623737524867}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n\t\r\n\tmounted:function(){\r\n\t\tvar rector = $('#selectionRect');\r\n\t\t    //拖选起点\r\n\t\t    var startX = 0;\r\n\t\t    var startY = 0;\r\n\t\t\r\n\t\t    //选择框核心代码\r\n\t\t    function resizeToPoint(x,y){\r\n\t\t        var width = Math.abs(x-startX);\r\n\t\t        var height = Math.abs(y-startY);\r\n\t\t        rector.width(width);\r\n\t\t        rector.height(height);\r\n\t\t        //当鼠标x方向上为向左拖动 设置left位置\r\n\t\t        if(x<startX){\r\n\t\t            rector.css({\r\n\t\t                left:(startX-width)+'px',\r\n\t\t            });\r\n\t\t        }\r\n\t\t        //当鼠标y方向上为向上拖动 设置top位置\r\n\t\t        if(y<startY){\r\n\t\t            rector.css({\r\n\t\t                top:(startY-height)+'px',\r\n\t\t            });\r\n\t\t        }\r\n\t\t    }\r\n\t\t\r\n\t\t    /**\r\n\t\t     *核心相交算法\r\n\t\t     * @param rect1{x1,y1,x2,y2}\r\n\t\t     * @param rect2 {x1,y1,x2,y2}\r\n\t\t     */\r\n\t\t    function isCross(rect1,rect2){\r\n\t\t        var xNotCross=true;//x方向上不重合\r\n\t\t        var yNotCross = true;//y方向上不重合\r\n\t\t        xNotCross =((rect1.x1>rect2.x2) || (rect2.x1>rect1.x2));\r\n\t\t        yNotCross =  ((rect1.y1>rect2.y2) || (rect2.y1>rect1.y2));\r\n\t\t        return !(xNotCross || yNotCross);\r\n\t\t    }\r\n\t\t    /**\r\n\t\t     *获取元素的矩形的起始点坐标与其对角点坐标\r\n\t\t     * @param $el\r\n\t\t     * @return {x1,y1,x2,y2}\r\n\t\t     */\r\n\t\t    function getRect($el){\r\n\t\t        var x1 = $el.offset().left;\r\n\t\t        var y1 = $el.offset().top;\r\n\t\t        var x2 = x1 +$el.outerWidth();\r\n\t\t        var y2 = y1+$el.outerHeight();\r\n\t\t        return {x1,x2,y1,y2};\r\n\t\t    }\r\n\t\t\tvar a = '';\r\n\t\t    //框选处理 如果元素与选择框相交则设置样式\r\n\t\t    function handleRectSelection(){\t\r\n\t\t        var selectionReact = getRect(rector);\r\n\t\t\t\t\r\n\t\t        $('.dragbox').each(function(){\r\n\t\t            var rect = getRect($(this));\r\n\t\t            if(isCross(selectionReact,rect)){\r\n\t\t\t\t\t\ta = a + $(this).text()+\",\"\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$(this).addClass('selected');\r\n\t\t            }else{\r\n\t\t                $(this).removeClass('selected');\r\n\t\t            }\r\n\t\t        });\r\n\t\t\t\tconsole.log(\"选中的方框为：\"+a)\r\n\t\t    }\r\n\t\t\r\n\t\t$(window).on({\r\n\t\t    mousemove:function(e){\r\n\t\t        if(e.which===1){\r\n\t\t            rector.show();\r\n\t\t            resizeToPoint(e.pageX, e.pageY);\r\n\t\t            \r\n\t\t        }\r\n\t\t    },\r\n\t\t    mouseup:function(){\r\n\t\t       handleRectSelection();\r\n\t\t    },\r\n\t\t    mousedown:function(e){\r\n\t\t        startX = e.pageX;\r\n\t\t        startY = e.pageY;\r\n\t\t        rector.css({\r\n\t\t            top: startY+'px',\r\n\t\t            left: startX+'px',\r\n\t\t        });\r\n\t\t    }\r\n\t\t});\r\n\t}\n}\n",{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\r\n\t  <ul style=\"display: inline-block\">\r\n\t  \t<li class=\"dragbox\" id=\"box1\">1</li>\r\n\t  \t<li class=\"dragbox\" id=\"box2\">2</li>\r\n\t  \t<li class=\"dragbox\" id=\"box3\">3</li>\r\n\t  \t<li class=\"dragbox\" id=\"box4\">4</li>\r\n\t  \t<li class=\"dragbox\" id=\"box5\">5</li>\r\n\t  \t<li class=\"dragbox\" id=\"box6\">6</li>\r\n\t  </ul>\r\n\t  <div id=\"selectionRect\" style=\"position: absolute;background-color: rgba(137,189,189,0.5);border:1px solid rgb(137,189,189);;\"></div>\r\n  </div>\n</template>\n\n<script>\nexport default {\n\t\r\n\tmounted:function(){\r\n\t\tvar rector = $('#selectionRect');\r\n\t\t    //拖选起点\r\n\t\t    var startX = 0;\r\n\t\t    var startY = 0;\r\n\t\t\r\n\t\t    //选择框核心代码\r\n\t\t    function resizeToPoint(x,y){\r\n\t\t        var width = Math.abs(x-startX);\r\n\t\t        var height = Math.abs(y-startY);\r\n\t\t        rector.width(width);\r\n\t\t        rector.height(height);\r\n\t\t        //当鼠标x方向上为向左拖动 设置left位置\r\n\t\t        if(x<startX){\r\n\t\t            rector.css({\r\n\t\t                left:(startX-width)+'px',\r\n\t\t            });\r\n\t\t        }\r\n\t\t        //当鼠标y方向上为向上拖动 设置top位置\r\n\t\t        if(y<startY){\r\n\t\t            rector.css({\r\n\t\t                top:(startY-height)+'px',\r\n\t\t            });\r\n\t\t        }\r\n\t\t    }\r\n\t\t\r\n\t\t    /**\r\n\t\t     *核心相交算法\r\n\t\t     * @param rect1{x1,y1,x2,y2}\r\n\t\t     * @param rect2 {x1,y1,x2,y2}\r\n\t\t     */\r\n\t\t    function isCross(rect1,rect2){\r\n\t\t        var xNotCross=true;//x方向上不重合\r\n\t\t        var yNotCross = true;//y方向上不重合\r\n\t\t        xNotCross =((rect1.x1>rect2.x2) || (rect2.x1>rect1.x2));\r\n\t\t        yNotCross =  ((rect1.y1>rect2.y2) || (rect2.y1>rect1.y2));\r\n\t\t        return !(xNotCross || yNotCross);\r\n\t\t    }\r\n\t\t    /**\r\n\t\t     *获取元素的矩形的起始点坐标与其对角点坐标\r\n\t\t     * @param $el\r\n\t\t     * @return {x1,y1,x2,y2}\r\n\t\t     */\r\n\t\t    function getRect($el){\r\n\t\t        var x1 = $el.offset().left;\r\n\t\t        var y1 = $el.offset().top;\r\n\t\t        var x2 = x1 +$el.outerWidth();\r\n\t\t        var y2 = y1+$el.outerHeight();\r\n\t\t        return {x1,x2,y1,y2};\r\n\t\t    }\r\n\t\t\tvar a = '';\r\n\t\t    //框选处理 如果元素与选择框相交则设置样式\r\n\t\t    function handleRectSelection(){\t\r\n\t\t        var selectionReact = getRect(rector);\r\n\t\t\t\t\r\n\t\t        $('.dragbox').each(function(){\r\n\t\t            var rect = getRect($(this));\r\n\t\t            if(isCross(selectionReact,rect)){\r\n\t\t\t\t\t\ta = a + $(this).text()+\",\"\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t$(this).addClass('selected');\r\n\t\t            }else{\r\n\t\t                $(this).removeClass('selected');\r\n\t\t            }\r\n\t\t        });\r\n\t\t\t\tconsole.log(\"选中的方框为：\"+a)\r\n\t\t    }\r\n\t\t\r\n\t\t$(window).on({\r\n\t\t    mousemove:function(e){\r\n\t\t        if(e.which===1){\r\n\t\t            rector.show();\r\n\t\t            resizeToPoint(e.pageX, e.pageY);\r\n\t\t            \r\n\t\t        }\r\n\t\t    },\r\n\t\t    mouseup:function(){\r\n\t\t       handleRectSelection();\r\n\t\t    },\r\n\t\t    mousedown:function(e){\r\n\t\t        startX = e.pageX;\r\n\t\t        startY = e.pageY;\r\n\t\t        rector.css({\r\n\t\t            top: startY+'px',\r\n\t\t            left: startX+'px',\r\n\t\t        });\r\n\t\t    }\r\n\t\t});\r\n\t}\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>\n"]}]}
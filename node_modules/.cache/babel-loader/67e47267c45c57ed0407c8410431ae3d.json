{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\seat\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\seat\\src\\axios\\axios.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\seat\\src\\axios\\axios.js","mtime":1623745198281},{"path":"C:\\Users\\Administrator\\Desktop\\seat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\seat\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\r\n * Created by tengteng on 18/7/17.\r\n */\n// axios\nimport axios from 'axios';\nimport baseUrl from \"./index\";\naxios.defaults.withCredentials = true;\n/**\r\n * 添加请求拦截器\r\n */\n\naxios.interceptors.request.use(function (config) {\n  // //判断token是否存在\n  // if (config.url !== baseUrl + '/user/login' && localStorage.getItem('token')) {\n  //   config.headers.token = localStorage.getItem('token');  //将token设置成请求头\n  // }\n  // 预处理请求信息（config\n  return config;\n}, function (error) {\n  // 预处理请求有异常（error）时抛出错误\n  return Promise.reject(error);\n});\n/**\r\n * 添加响应拦截器\r\n */\n\naxios.interceptors.response.use(function (response) {\n  // 预处理响应数据（response）\n  return response;\n}, function (error) {\n  if (error.response !== undefined) {\n    if (error.response.status === 403) {// 错误处理\n      // window.location.reload();\n    }\n  }\n\n  return Promise.reject(checkStatus(error));\n});\n/**\r\n * 状态码校验\r\n * @param response\r\n * @return {*}\r\n */\n\nfunction checkStatus(response) {\n  // 有响应时校验状态\n  if (response) {\n    // -1000 自己定义，连接错误的status\n    var status = response.status || -1000;\n\n    if (status === 200 || status === 304 || status === 400) {\n      return response.data;\n    } else {\n      var errorInfo = '';\n\n      switch (status) {\n        case -1:\n          errorInfo = '远程服务响应失败,请稍后重试';\n          break;\n\n        case 400:\n          errorInfo = '400: 错误请求';\n          break;\n\n        case 401:\n          errorInfo = '401: 访问令牌无效或已过期';\n          break;\n\n        case 403:\n          errorInfo = '403: 拒绝访问';\n          break;\n\n        case 404:\n          errorInfo = '404：资源不存在';\n          break;\n\n        case 405:\n          errorInfo = '405: 请求方法未允许';\n          break;\n\n        case 408:\n          errorInfo = '408: 请求超时';\n          break;\n\n        case 500:\n          errorInfo = '500：访问服务失败';\n          break;\n\n        case 501:\n          errorInfo = '501：未实现';\n          break;\n\n        case 502:\n          errorInfo = '502：无效网关';\n          break;\n\n        case 503:\n          errorInfo = '503: 服务不可用';\n          break;\n\n        default:\n          errorInfo = \"\\u8FDE\\u63A5\\u9519\\u8BEF\".concat(status);\n      }\n\n      return {\n        status: status,\n        msg: errorInfo\n      };\n    }\n  } // 异常状态下，返回错误信息\n\n\n  return {\n    status: -404,\n    msg: '网络异常'\n  };\n}\n/**\r\n * 返回axios方法\r\n * @param url（如果传绝对地址则baseURL不会追加到url之前）\r\n * @param method\r\n * @param timeout\r\n * @param data\r\n * @param headers\r\n * @param dataType\r\n * @returns {AxiosPromise}\r\n */\n\n\nexport default function (url, _ref) {\n  var _ref$method = _ref.method,\n      method = _ref$method === void 0 ? 'post' : _ref$method,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 10000 : _ref$timeout,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? {} : _ref$data,\n      _ref$params = _ref.params,\n      params = _ref$params === void 0 ? {} : _ref$params,\n      _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {\n    'Content-Type': 'application/json;charset=UTF-8'\n  } : _ref$headers,\n      _ref$responseType = _ref.responseType,\n      responseType = _ref$responseType === void 0 ? 'json' : _ref$responseType;\n\n  // 可根据不同method动态配置headers\n  if (method === 'get') {\n    headers = Object.assign({}, headers);\n  } else {\n    headers = Object.assign({}, headers);\n  }\n\n  var config = {\n    method: method,\n    timeout: timeout,\n    url: url,\n    baseURL: baseUrl,\n    data: data,\n    params: params,\n    headers: headers,\n    responseType: responseType\n  };\n  return axios(config);\n}",{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\seat\\src\\axios\\axios.js"],"names":["axios","baseUrl","defaults","withCredentials","interceptors","request","use","config","error","Promise","reject","response","undefined","status","checkStatus","data","errorInfo","msg","url","method","timeout","params","headers","responseType","Object","assign","baseURL"],"mappings":"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","sourcesContent":["/**\r\n * Created by tengteng on 18/7/17.\r\n */\r\n\r\n// axios\r\n\r\nimport axios from 'axios';\r\nimport baseUrl from './index'\r\naxios.defaults.withCredentials = true;\r\n\r\n/**\r\n * 添加请求拦截器\r\n */\r\naxios.interceptors.request.use(function (config) {\r\n  // //判断token是否存在\r\n  // if (config.url !== baseUrl + '/user/login' && localStorage.getItem('token')) {\r\n  //   config.headers.token = localStorage.getItem('token');  //将token设置成请求头\r\n  // }\r\n  // 预处理请求信息（config\r\n  return config;\r\n}, function (error) {\r\n  // 预处理请求有异常（error）时抛出错误\r\n  return Promise.reject(error);\r\n});\r\n\r\n/**\r\n * 添加响应拦截器\r\n */\r\naxios.interceptors.response.use(function (response) {\r\n  // 预处理响应数据（response）\r\n  return response;\r\n}, function (error) {\r\n  if (error.response !== undefined) {\r\n    if (error.response.status === 403) { // 错误处理\r\n      \r\n      // window.location.reload();\r\n    }\r\n  }\r\n  return Promise.reject(checkStatus(error));\r\n});\r\n\r\n/**\r\n * 状态码校验\r\n * @param response\r\n * @return {*}\r\n */\r\nfunction checkStatus (response) {\r\n  // 有响应时校验状态\r\n  if (response) {\r\n    // -1000 自己定义，连接错误的status\r\n    const status = response.status || -1000;\r\n    if (status === 200 || status === 304 || status === 400) {\r\n      return response.data;\r\n    } else {\r\n      let errorInfo = '';\r\n      switch (status) {\r\n        case -1:\r\n          errorInfo = '远程服务响应失败,请稍后重试';\r\n          break;\r\n        case 400:\r\n          errorInfo = '400: 错误请求';\r\n          break;\r\n        case 401:\r\n          errorInfo = '401: 访问令牌无效或已过期';\r\n          break;\r\n        case 403:\r\n          errorInfo = '403: 拒绝访问';\r\n          break;\r\n        case 404:\r\n          errorInfo = '404：资源不存在';\r\n          break;\r\n        case 405:\r\n          errorInfo = '405: 请求方法未允许';\r\n          break;\r\n        case 408:\r\n          errorInfo = '408: 请求超时';\r\n          break;\r\n        case 500:\r\n          errorInfo = '500：访问服务失败';\r\n          break;\r\n        case 501:\r\n          errorInfo = '501：未实现';\r\n          break;\r\n        case 502:\r\n          errorInfo = '502：无效网关';\r\n          break;\r\n        case 503:\r\n          errorInfo = '503: 服务不可用';\r\n          break;\r\n        default:\r\n          errorInfo = `连接错误${status}`\r\n      }\r\n      return {status, msg: errorInfo}\r\n    }\r\n  }\r\n  // 异常状态下，返回错误信息\r\n  return {status: -404, msg: '网络异常'};\r\n}\r\n\r\n/**\r\n * 返回axios方法\r\n * @param url（如果传绝对地址则baseURL不会追加到url之前）\r\n * @param method\r\n * @param timeout\r\n * @param data\r\n * @param headers\r\n * @param dataType\r\n * @returns {AxiosPromise}\r\n */\r\nexport default function (url, {\r\n  method = 'post',\r\n  timeout = 10000,\r\n  data = {},\r\n  params = {},\r\n  headers = {'Content-Type': 'application/json;charset=UTF-8'},\r\n  responseType = 'json'\r\n})\r\n{\r\n  // 可根据不同method动态配置headers\r\n  if (method === 'get') {\r\n    headers = Object.assign({}, headers);\r\n  } else {\r\n    headers = Object.assign({}, headers);\r\n  }\r\n  const config = {\r\n    method: method,\r\n    timeout: timeout,\r\n    url: url,\r\n    baseURL: baseUrl,\r\n    data: data,\r\n    params: params,\r\n    headers: headers,\r\n    responseType: responseType\r\n  };\r\n  return axios(config);\r\n}\r\n"]}]}
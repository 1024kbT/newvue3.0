{"remainingRequest":"D:\\project\\seat\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\seat\\src\\components\\com\\kuang.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\seat\\src\\components\\com\\kuang.vue","mtime":1624096120851},{"path":"D:\\project\\seat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\seat\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\project\\seat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\seat\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"Hello\",\r\n  props: {\r\n    txtlist: {\r\n      type: Object,\r\n      default: function() {\r\n        return {\r\n          x1: 430,\r\n          y1: 420,\r\n          x2: 1440,\r\n          y2: 860,\r\n        };\r\n      }\r\n    },\r\n    persons: Array,\r\n    options: Object\r\n  },\r\n  data() {\r\n    return {\r\n      xinxi: [],\r\n      items: [],\r\n      seat: [],\r\n      sort: [],\r\n      sum: 0,\r\n      lastSeat: [],\r\n        temp1: null,\r\n            temp2: \"\",\r\n    };\r\n  },\r\n  created() {\r\n    const app = this;\r\n    this.$axios\r\n      .getDistributeData()\r\n      .then(res => {\r\n        app.xinxi = res.data.data.confSeats;\r\n      })\r\n      .catch(function(res) {\r\n        console.log(res.data);\r\n      });\r\n  },\r\n  mounted: function() {\r\n    var rector = $(\"#selectionRect\");\r\n\r\n    //拖选起点\r\n    var startX = 0;\r\n    var startY = 0;\r\n    //选择框核心代码\r\n\r\n    function resizeToPoint(x, y) {\r\n      var width = Math.abs(x - startX);\r\n      var height = Math.abs(y - startY);\r\n      rector.width(width);\r\n      rector.height(height);\r\n      //当鼠标x方向上为向左拖动 设置left位置\r\n      if (x < startX) {\r\n        rector.css({\r\n          left: startX - width + \"px\"\r\n        });\r\n      }\r\n      //当鼠标y方向上为向上拖动 设置top位置\r\n      if (y < startY) {\r\n        rector.css({\r\n          top: startY - height + \"px\"\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     *核心相交算法\r\n     * @param rect1{x1,y1,x2,y2}\r\n     * @param rect2 {x1,y1,x2,y2}\r\n     */\r\n\r\n    /**\r\n     *获取元素的矩形的起始点坐标与其对角点坐标\r\n     * @param $el\r\n     * @return {x1,y1,x2,y2}\r\n     */\r\n\r\n    //框选处理 如果元素与选择框相交则设置样式\r\n  },\r\n  watch: {\r\n    options: {\r\n      handler: function(newVal, oldVal) {\r\n        this.seatSort();\r\n        // console.log(11111,newVal,oldVal)\r\n        // console.log(this.options)\r\n      },\r\n      deep: true\r\n    },\r\n    persons: {\r\n      handler: function(newVal, oldVal) {\r\n        this.sortPerson();\r\n      },\r\n      deep: true\r\n    },\r\n    txtlist: {\r\n      handler: function(newVal, oldVal) {\r\n        this.handleRectSelection(this.txtlist);\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  methods: {\r\n    seatSort() {\r\n      var oT1 = document.querySelectorAll(\".t1\");\r\n\r\n      for (var i = 0; i < oT1.length; i++) {\r\n        for (var j = 0; j < this.lastSeat.length; j++) {\r\n          if (i == this.lastSeat[j]) {\r\n            var a = \"\";\r\n            var r,\r\n              w = 0;\r\n            r = Math.ceil((i + 1) / 30);\r\n            w = parseInt((i + 1) % 30);\r\n            a = r + \"-\" + w;\r\n            if (this.options[a] != null) {\r\n              oT1[i].innerText = this.options[a];\r\n            } else {\r\n              oT1[i].innerText = \"占位\";\r\n            }\r\n            this.GLOBAL.baseURL[j][\"orderMark\"] = parseInt(this.options[a]);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    handleRectSelection(data) {\r\n      var a = \"\";\r\n      const app = this;\r\n\r\n      $(\".t1\").each(function(index) {\r\n        var rect = app.getRect($(this));\r\n        if (app.isCross(data, rect)) {\r\n          var b = 0;\r\n          app.xinxi[index][\"blockId\"] = 1;\r\n          b = $(this).text();\r\n          console.log(b)\r\n          if (b != \"占位\") {\r\n            app.xinxi[index].merge = 0;\r\n            $(this).addClass(\"selected\");\r\n          } else {\r\n            $(this).addClass(\"zhanyong\");\r\n            app.xinxi[index].merge = 2;\r\n          }\r\n          app.seat.push(index);\r\n          app.items.push(app.xinxi[index]);\r\n        } else {\r\n          $(this).text(\"\");\r\n          $(this).removeClass(\"selected\");\r\n        }\r\n      });\r\n      this.GLOBAL.baseURL = app.items;\r\n      app.sum = app.items.length;\r\n      app.$emit(\"showSum\", app.sum);\r\n      app.lastSeat = app.seat;\r\n      app.seat = [];\r\n      app.items = [];\r\n    },\r\n    getRect($el) {\r\n      var x1 = $el.offset().left;\r\n      var y1 = $el.offset().top;\r\n      var x2 = x1 + $el.outerWidth();\r\n      var y2 = y1 + $el.outerHeight();\r\n      return { x1, x2, y1, y2 };\r\n    },\r\n    isCross(rect1, rect2) {\r\n      var xNotCross = true; //x方向上不重合\r\n      var yNotCross = true; //y方向上不重合\r\n      xNotCross = rect1.x1 > rect2.x2 || rect2.x1 > rect1.x2;\r\n      yNotCross = rect1.y1 > rect2.y2 || rect2.y1 > rect1.y2;\r\n      return !(xNotCross || yNotCross);\r\n    },\r\n    sortPerson() {\r\n      console.log(this.persons);\r\n      var oT1 = document.querySelectorAll(\".t1\");\r\n      for (var i = 0; i < oT1.length; i++) {\r\n        for (var j = 0; j < this.lastSeat.length; j++) {\r\n          if (i == this.lastSeat[j]) {\r\n            if (this.persons[j].merge == 0) {\r\n              oT1[i].className = oT1[i].className + \" choose\";\r\n              console.log(oT1[i].className);\r\n              oT1[i].innerText = this.persons[j][\"userUnit\"].des;\r\n            } else {\r\n              oT1[i].innerText = \"占位\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 进入时\r\n    // handleDragEnter(e) {\r\n    //   console.log('拖拽进入')\r\n    //   console.log(e.currentTarget);\r\n    //   e.currentTarget.innerText = ''\r\n    // },\r\n       handleDrag(event) {\r\n            this.temp1 = event.currentTarget;\r\n            this.temp2 = event.currentTarget.innerText;\r\n            //   this.temp1 = event.currentTarget.innerText;\r\n        },\r\n        handleDrop(e) {\r\n            e.preventDefault();\r\n            if (!e.currentTarget.innerText) {\r\n                e.currentTarget.innerText = \"占位\";\r\n            } else {\r\n                this.temp1.innerText = e.currentTarget.innerText;\r\n                e.currentTarget.innerText = this.temp2;\r\n            }\r\n        },\r\n        handleDragOver(e) {\r\n            e.preventDefault();\r\n        },\r\n        onDragend(e) {\r\n            console.log(\"结束\", e);\r\n        },\r\n    // 拖拽结束\r\n    // handleDragEnd(){\r\n    //     console.log('拖拽结束');\r\n    // }\r\n  }\r\n};\r\n",{"version":3,"sources":["kuang.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"kuang.vue","sourceRoot":"src/components/com","sourcesContent":["<template>\r\n  <div id=\"kz\" style=\"display: flex\">\r\n    <div v-for=\"index of 5\" class=\"main\" :key=\"index.id\" :gindex=\"index\">\r\n      <div style=\"display: flex\">\r\n        <div\r\n          class=\"t1\"\r\n          v-for=\"index of 6\"\r\n          :key=\"index.id\"\r\n          draggable=\"true\"\r\n          @dragstart=\"handleDrag($event)\"\r\n          @drop=\"handleDrop($event)\"\r\n          @dragover=\"handleDragOver($event)\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Hello\",\r\n  props: {\r\n    txtlist: {\r\n      type: Object,\r\n      default: function() {\r\n        return {\r\n          x1: 430,\r\n          y1: 420,\r\n          x2: 1440,\r\n          y2: 860,\r\n        };\r\n      }\r\n    },\r\n    persons: Array,\r\n    options: Object\r\n  },\r\n  data() {\r\n    return {\r\n      xinxi: [],\r\n      items: [],\r\n      seat: [],\r\n      sort: [],\r\n      sum: 0,\r\n      lastSeat: [],\r\n        temp1: null,\r\n            temp2: \"\",\r\n    };\r\n  },\r\n  created() {\r\n    const app = this;\r\n    this.$axios\r\n      .getDistributeData()\r\n      .then(res => {\r\n        app.xinxi = res.data.data.confSeats;\r\n      })\r\n      .catch(function(res) {\r\n        console.log(res.data);\r\n      });\r\n  },\r\n  mounted: function() {\r\n    var rector = $(\"#selectionRect\");\r\n\r\n    //拖选起点\r\n    var startX = 0;\r\n    var startY = 0;\r\n    //选择框核心代码\r\n\r\n    function resizeToPoint(x, y) {\r\n      var width = Math.abs(x - startX);\r\n      var height = Math.abs(y - startY);\r\n      rector.width(width);\r\n      rector.height(height);\r\n      //当鼠标x方向上为向左拖动 设置left位置\r\n      if (x < startX) {\r\n        rector.css({\r\n          left: startX - width + \"px\"\r\n        });\r\n      }\r\n      //当鼠标y方向上为向上拖动 设置top位置\r\n      if (y < startY) {\r\n        rector.css({\r\n          top: startY - height + \"px\"\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     *核心相交算法\r\n     * @param rect1{x1,y1,x2,y2}\r\n     * @param rect2 {x1,y1,x2,y2}\r\n     */\r\n\r\n    /**\r\n     *获取元素的矩形的起始点坐标与其对角点坐标\r\n     * @param $el\r\n     * @return {x1,y1,x2,y2}\r\n     */\r\n\r\n    //框选处理 如果元素与选择框相交则设置样式\r\n  },\r\n  watch: {\r\n    options: {\r\n      handler: function(newVal, oldVal) {\r\n        this.seatSort();\r\n        // console.log(11111,newVal,oldVal)\r\n        // console.log(this.options)\r\n      },\r\n      deep: true\r\n    },\r\n    persons: {\r\n      handler: function(newVal, oldVal) {\r\n        this.sortPerson();\r\n      },\r\n      deep: true\r\n    },\r\n    txtlist: {\r\n      handler: function(newVal, oldVal) {\r\n        this.handleRectSelection(this.txtlist);\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  methods: {\r\n    seatSort() {\r\n      var oT1 = document.querySelectorAll(\".t1\");\r\n\r\n      for (var i = 0; i < oT1.length; i++) {\r\n        for (var j = 0; j < this.lastSeat.length; j++) {\r\n          if (i == this.lastSeat[j]) {\r\n            var a = \"\";\r\n            var r,\r\n              w = 0;\r\n            r = Math.ceil((i + 1) / 30);\r\n            w = parseInt((i + 1) % 30);\r\n            a = r + \"-\" + w;\r\n            if (this.options[a] != null) {\r\n              oT1[i].innerText = this.options[a];\r\n            } else {\r\n              oT1[i].innerText = \"占位\";\r\n            }\r\n            this.GLOBAL.baseURL[j][\"orderMark\"] = parseInt(this.options[a]);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    handleRectSelection(data) {\r\n      var a = \"\";\r\n      const app = this;\r\n\r\n      $(\".t1\").each(function(index) {\r\n        var rect = app.getRect($(this));\r\n        if (app.isCross(data, rect)) {\r\n          var b = 0;\r\n          app.xinxi[index][\"blockId\"] = 1;\r\n          b = $(this).text();\r\n          console.log(b)\r\n          if (b != \"占位\") {\r\n            app.xinxi[index].merge = 0;\r\n            $(this).addClass(\"selected\");\r\n          } else {\r\n            $(this).addClass(\"zhanyong\");\r\n            app.xinxi[index].merge = 2;\r\n          }\r\n          app.seat.push(index);\r\n          app.items.push(app.xinxi[index]);\r\n        } else {\r\n          $(this).text(\"\");\r\n          $(this).removeClass(\"selected\");\r\n        }\r\n      });\r\n      this.GLOBAL.baseURL = app.items;\r\n      app.sum = app.items.length;\r\n      app.$emit(\"showSum\", app.sum);\r\n      app.lastSeat = app.seat;\r\n      app.seat = [];\r\n      app.items = [];\r\n    },\r\n    getRect($el) {\r\n      var x1 = $el.offset().left;\r\n      var y1 = $el.offset().top;\r\n      var x2 = x1 + $el.outerWidth();\r\n      var y2 = y1 + $el.outerHeight();\r\n      return { x1, x2, y1, y2 };\r\n    },\r\n    isCross(rect1, rect2) {\r\n      var xNotCross = true; //x方向上不重合\r\n      var yNotCross = true; //y方向上不重合\r\n      xNotCross = rect1.x1 > rect2.x2 || rect2.x1 > rect1.x2;\r\n      yNotCross = rect1.y1 > rect2.y2 || rect2.y1 > rect1.y2;\r\n      return !(xNotCross || yNotCross);\r\n    },\r\n    sortPerson() {\r\n      console.log(this.persons);\r\n      var oT1 = document.querySelectorAll(\".t1\");\r\n      for (var i = 0; i < oT1.length; i++) {\r\n        for (var j = 0; j < this.lastSeat.length; j++) {\r\n          if (i == this.lastSeat[j]) {\r\n            if (this.persons[j].merge == 0) {\r\n              oT1[i].className = oT1[i].className + \" choose\";\r\n              console.log(oT1[i].className);\r\n              oT1[i].innerText = this.persons[j][\"userUnit\"].des;\r\n            } else {\r\n              oT1[i].innerText = \"占位\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 进入时\r\n    // handleDragEnter(e) {\r\n    //   console.log('拖拽进入')\r\n    //   console.log(e.currentTarget);\r\n    //   e.currentTarget.innerText = ''\r\n    // },\r\n       handleDrag(event) {\r\n            this.temp1 = event.currentTarget;\r\n            this.temp2 = event.currentTarget.innerText;\r\n            //   this.temp1 = event.currentTarget.innerText;\r\n        },\r\n        handleDrop(e) {\r\n            e.preventDefault();\r\n            if (!e.currentTarget.innerText) {\r\n                e.currentTarget.innerText = \"占位\";\r\n            } else {\r\n                this.temp1.innerText = e.currentTarget.innerText;\r\n                e.currentTarget.innerText = this.temp2;\r\n            }\r\n        },\r\n        handleDragOver(e) {\r\n            e.preventDefault();\r\n        },\r\n        onDragend(e) {\r\n            console.log(\"结束\", e);\r\n        },\r\n    // 拖拽结束\r\n    // handleDragEnd(){\r\n    //     console.log('拖拽结束');\r\n    // }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.t1 {\r\n  width: 40px;\r\n  height: 37px;\r\n  margin: 3px;\r\n  font-size: 10px;\r\n  line-height: 30px;\r\n  background-image: url(\"../../assets/默认空位.png\");\r\n  background-repeat: no-repeat;\r\n  background-size: 100% 100%;\r\n  text-align: center;\r\n  color: #fff;\r\n  border-radius: 25%;\r\n  box-shadow: 5px 5px 10px#000;\r\n}\r\n.selected {\r\n  width: 40px;\r\n  height: 37px;\r\n  margin: 3px;\r\n  font-size: 10px;\r\n  line-height: 30px;\r\n  text-align: center;\r\n  color: #fff;\r\n  background-image: url(\"../../assets/框选中.png\");\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n.choose {\r\n  width: 40px;\r\n  height: 37px;\r\n  margin: 2px;\r\n  line-height: 30px;\r\n  text-align: center;\r\n  color: #fff;\r\n  background-image: url(\"../../assets/已经有人.png\");\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n}\r\n.zhanyong {\r\n  width: 40px;\r\n  height: 37px;\r\n  margin: 2px;\r\n  line-height: 30px;\r\n  text-align: center;\r\n  color: #fff;\r\n  background-image: url(\"../../assets/已经占用但没有人.png\");\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n}\r\n.main {\r\n  width: 20%;\r\n  margin: 0 auto;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"]}]}